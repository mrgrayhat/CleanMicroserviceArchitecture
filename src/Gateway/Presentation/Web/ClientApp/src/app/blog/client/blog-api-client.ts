/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IBlogClient {
    index(pageNumber: number | undefined, pageSize: number | undefined, version: string): Observable<PagedResponseOfIEnumerableOfGetPostDto>;
    post(version: string, command: CreatePostCommand): Observable<ResponseOfInteger>;
    getById(id: number, version: string): Observable<ResponseOfGetPostDto>;
    delete(id: number, version: string): Observable<ResponseOfInteger>;
    put(id: number, version: string, command: UpdatePostCommand): Observable<ResponseOfInteger>;
    search(text: string | null, sortOrder: string | null | undefined, version: string): Observable<ResponseOfGetPostDto>;
}

@Injectable({
    providedIn: 'root'
})
export class BlogClient implements IBlogClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    index(pageNumber: number | undefined, pageSize: number | undefined, version: string): Observable<PagedResponseOfIEnumerableOfGetPostDto> {
        let url_ = this.baseUrl + "/api/v{version}/Blog?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(<any>response_);
                } catch (e) {
                    return <Observable<PagedResponseOfIEnumerableOfGetPostDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResponseOfIEnumerableOfGetPostDto>><any>_observableThrow(response_);
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<PagedResponseOfIEnumerableOfGetPostDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResponseOfIEnumerableOfGetPostDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResponseOfIEnumerableOfGetPostDto>(<any>null);
    }

    post(version: string, command: CreatePostCommand): Observable<ResponseOfInteger> {
        let url_ = this.baseUrl + "/api/v{version}/Blog";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<ResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<ResponseOfInteger> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseOfInteger>(<any>null);
    }

    getById(id: number, version: string): Observable<ResponseOfGetPostDto> {
        let url_ = this.baseUrl + "/api/v{version}/Blog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<ResponseOfGetPostDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseOfGetPostDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ResponseOfGetPostDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfGetPostDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseOfGetPostDto>(<any>null);
    }

    delete(id: number, version: string): Observable<ResponseOfInteger> {
        let url_ = this.baseUrl + "/api/v{version}/Blog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ResponseOfInteger> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseOfInteger>(<any>null);
    }

    put(id: number, version: string, command: UpdatePostCommand): Observable<ResponseOfInteger> {
        let url_ = this.baseUrl + "/api/v{version}/Blog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<ResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<ResponseOfInteger> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseOfInteger>(<any>null);
    }

    search(text: string | null, sortOrder: string | null | undefined, version: string): Observable<ResponseOfGetPostDto> {
        let url_ = this.baseUrl + "/api/v{version}/Blog/search/{text}?";
        if (text === undefined || text === null)
            throw new Error("The parameter 'text' must be defined.");
        url_ = url_.replace("{text}", encodeURIComponent("" + text)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (sortOrder !== undefined)
            url_ += "sortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<ResponseOfGetPostDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResponseOfGetPostDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ResponseOfGetPostDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfGetPostDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResponseOfGetPostDto>(<any>null);
    }
}

export class ResponseOfIEnumerableOfGetPostDto implements IResponseOfIEnumerableOfGetPostDto {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: GetPostDto[] | undefined;

    constructor(data?: IResponseOfIEnumerableOfGetPostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.message = _data["message"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetPostDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseOfIEnumerableOfGetPostDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseOfIEnumerableOfGetPostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["message"] = this.message;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IResponseOfIEnumerableOfGetPostDto {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: GetPostDto[] | undefined;
}

export class PagedResponseOfIEnumerableOfGetPostDto extends ResponseOfIEnumerableOfGetPostDto implements IPagedResponseOfIEnumerableOfGetPostDto {
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: IPagedResponseOfIEnumerableOfGetPostDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PagedResponseOfIEnumerableOfGetPostDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResponseOfIEnumerableOfGetPostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPagedResponseOfIEnumerableOfGetPostDto extends IResponseOfIEnumerableOfGetPostDto {
    pageNumber?: number;
    pageSize?: number;
}

export class GetPostDto implements IGetPostDto {
    id?: number;
    thumbnail?: string | undefined;
    tags?: string | undefined;
    created?: Date;
    lastModified?: Date | undefined;
    createdBy?: string | undefined;
    lastModifiedBy?: string | undefined;
    isArchive?: boolean;
    isPublic?: boolean;
    visits?: number;
    description?: string | undefined;
    locales?: PostLocaleDto[] | undefined;
    comments?: Comment[] | undefined;
    categoryId?: number | undefined;
    category?: Category | undefined;

    constructor(data?: IGetPostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.thumbnail = _data["thumbnail"];
            this.tags = _data["tags"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.isArchive = _data["isArchive"];
            this.isPublic = _data["isPublic"];
            this.visits = _data["visits"];
            this.description = _data["description"];
            if (Array.isArray(_data["locales"])) {
                this.locales = [] as any;
                for (let item of _data["locales"])
                    this.locales!.push(PostLocaleDto.fromJS(item));
            }
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(Comment.fromJS(item));
            }
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPostDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thumbnail"] = this.thumbnail;
        data["tags"] = this.tags;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["isArchive"] = this.isArchive;
        data["isPublic"] = this.isPublic;
        data["visits"] = this.visits;
        data["description"] = this.description;
        if (Array.isArray(this.locales)) {
            data["locales"] = [];
            for (let item of this.locales)
                data["locales"].push(item.toJSON());
        }
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPostDto {
    id?: number;
    thumbnail?: string | undefined;
    tags?: string | undefined;
    created?: Date;
    lastModified?: Date | undefined;
    createdBy?: string | undefined;
    lastModifiedBy?: string | undefined;
    isArchive?: boolean;
    isPublic?: boolean;
    visits?: number;
    description?: string | undefined;
    locales?: PostLocaleDto[] | undefined;
    comments?: Comment[] | undefined;
    categoryId?: number | undefined;
    category?: Category | undefined;
}

export class PostLocaleDto implements IPostLocaleDto {
    id?: number;
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
    title?: string | undefined;
    slug?: string | undefined;
    content?: string | undefined;
    postId?: number;
    cultureId?: number;

    constructor(data?: IPostLocaleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.slug = _data["slug"];
            this.content = _data["content"];
            this.postId = _data["postId"];
            this.cultureId = _data["cultureId"];
        }
    }

    static fromJS(data: any): PostLocaleDto {
        data = typeof data === 'object' ? data : {};
        let result = new PostLocaleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["slug"] = this.slug;
        data["content"] = this.content;
        data["postId"] = this.postId;
        data["cultureId"] = this.cultureId;
        return data; 
    }
}

export interface IPostLocaleDto {
    id?: number;
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
    title?: string | undefined;
    slug?: string | undefined;
    content?: string | undefined;
    postId?: number;
    cultureId?: number;
}

export abstract class AuditableBaseEntity implements IAuditableBaseEntity {
    id?: number;
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;

    constructor(data?: IAuditableBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditableBaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableBaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAuditableBaseEntity {
    id?: number;
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
}

export class Comment extends AuditableBaseEntity implements IComment {
    title?: string | undefined;
    body?: string | undefined;
    byIP?: string | undefined;
    byAgent?: string | undefined;
    postId?: number;
    post?: Post | undefined;

    constructor(data?: IComment) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.body = _data["body"];
            this.byIP = _data["byIP"];
            this.byAgent = _data["byAgent"];
            this.postId = _data["postId"];
            this.post = _data["post"] ? Post.fromJS(_data["post"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Comment {
        data = typeof data === 'object' ? data : {};
        let result = new Comment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["body"] = this.body;
        data["byIP"] = this.byIP;
        data["byAgent"] = this.byAgent;
        data["postId"] = this.postId;
        data["post"] = this.post ? this.post.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IComment extends IAuditableBaseEntity {
    title?: string | undefined;
    body?: string | undefined;
    byIP?: string | undefined;
    byAgent?: string | undefined;
    postId?: number;
    post?: Post | undefined;
}

export class Post extends AuditableBaseEntity implements IPost {
    isArchive?: boolean;
    isPublic?: boolean;
    visits?: number;
    thumbnail?: string | undefined;
    description?: string | undefined;
    tags?: string | undefined;
    locales?: PostLocale[] | undefined;
    comments?: Comment[] | undefined;
    categoryId?: number | undefined;
    category?: Category | undefined;

    constructor(data?: IPost) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isArchive = _data["isArchive"];
            this.isPublic = _data["isPublic"];
            this.visits = _data["visits"];
            this.thumbnail = _data["thumbnail"];
            this.description = _data["description"];
            this.tags = _data["tags"];
            if (Array.isArray(_data["locales"])) {
                this.locales = [] as any;
                for (let item of _data["locales"])
                    this.locales!.push(PostLocale.fromJS(item));
            }
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(Comment.fromJS(item));
            }
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Post {
        data = typeof data === 'object' ? data : {};
        let result = new Post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isArchive"] = this.isArchive;
        data["isPublic"] = this.isPublic;
        data["visits"] = this.visits;
        data["thumbnail"] = this.thumbnail;
        data["description"] = this.description;
        data["tags"] = this.tags;
        if (Array.isArray(this.locales)) {
            data["locales"] = [];
            for (let item of this.locales)
                data["locales"].push(item.toJSON());
        }
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IPost extends IAuditableBaseEntity {
    isArchive?: boolean;
    isPublic?: boolean;
    visits?: number;
    thumbnail?: string | undefined;
    description?: string | undefined;
    tags?: string | undefined;
    locales?: PostLocale[] | undefined;
    comments?: Comment[] | undefined;
    categoryId?: number | undefined;
    category?: Category | undefined;
}

export class PostLocale extends AuditableBaseEntity implements IPostLocale {
    title?: string | undefined;
    slug?: string | undefined;
    content?: string | undefined;
    postId?: number;
    post?: Post | undefined;
    cultureId?: number;
    localCulture?: Culture | undefined;

    constructor(data?: IPostLocale) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.slug = _data["slug"];
            this.content = _data["content"];
            this.postId = _data["postId"];
            this.post = _data["post"] ? Post.fromJS(_data["post"]) : <any>undefined;
            this.cultureId = _data["cultureId"];
            this.localCulture = _data["localCulture"] ? Culture.fromJS(_data["localCulture"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PostLocale {
        data = typeof data === 'object' ? data : {};
        let result = new PostLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["slug"] = this.slug;
        data["content"] = this.content;
        data["postId"] = this.postId;
        data["post"] = this.post ? this.post.toJSON() : <any>undefined;
        data["cultureId"] = this.cultureId;
        data["localCulture"] = this.localCulture ? this.localCulture.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IPostLocale extends IAuditableBaseEntity {
    title?: string | undefined;
    slug?: string | undefined;
    content?: string | undefined;
    postId?: number;
    post?: Post | undefined;
    cultureId?: number;
    localCulture?: Culture | undefined;
}

export class Culture implements ICulture {
    id?: number;
    code?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: ICulture) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): Culture {
        data = typeof data === 'object' ? data : {};
        let result = new Culture();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICulture {
    id?: number;
    code?: string | undefined;
    displayName?: string | undefined;
}

export class Category extends AuditableBaseEntity implements ICategory {
    name?: string | undefined;
    description?: string | undefined;
    parentId?: number | undefined;
    parent?: Category | undefined;
    subCategories?: Category[] | undefined;

    constructor(data?: ICategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.parentId = _data["parentId"];
            this.parent = _data["parent"] ? Category.fromJS(_data["parent"]) : <any>undefined;
            if (Array.isArray(_data["subCategories"])) {
                this.subCategories = [] as any;
                for (let item of _data["subCategories"])
                    this.subCategories!.push(Category.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.subCategories)) {
            data["subCategories"] = [];
            for (let item of this.subCategories)
                data["subCategories"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICategory extends IAuditableBaseEntity {
    name?: string | undefined;
    description?: string | undefined;
    parentId?: number | undefined;
    parent?: Category | undefined;
    subCategories?: Category[] | undefined;
}

export class ResponseOfGetPostDto implements IResponseOfGetPostDto {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: GetPostDto | undefined;

    constructor(data?: IResponseOfGetPostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.message = _data["message"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.data = _data["data"] ? GetPostDto.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ResponseOfGetPostDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseOfGetPostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["message"] = this.message;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IResponseOfGetPostDto {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: GetPostDto | undefined;
}

export class ResponseOfInteger implements IResponseOfInteger {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: number;

    constructor(data?: IResponseOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.message = _data["message"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ResponseOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["message"] = this.message;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["data"] = this.data;
        return data; 
    }
}

export interface IResponseOfInteger {
    succeeded?: boolean;
    message?: string | undefined;
    errors?: string[] | undefined;
    data?: number;
}

export class UpdatePostCommand implements IUpdatePostCommand {
    id?: number;
    locales?: PostLocale[] | undefined;
    categoryId?: number;
    tags?: string | undefined;
    thumbnail?: string | undefined;
    isArchive?: boolean;
    isPublic?: boolean;
    description?: string | undefined;

    constructor(data?: IUpdatePostCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["locales"])) {
                this.locales = [] as any;
                for (let item of _data["locales"])
                    this.locales!.push(PostLocale.fromJS(item));
            }
            this.categoryId = _data["categoryId"];
            this.tags = _data["tags"];
            this.thumbnail = _data["thumbnail"];
            this.isArchive = _data["isArchive"];
            this.isPublic = _data["isPublic"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdatePostCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePostCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.locales)) {
            data["locales"] = [];
            for (let item of this.locales)
                data["locales"].push(item.toJSON());
        }
        data["categoryId"] = this.categoryId;
        data["tags"] = this.tags;
        data["thumbnail"] = this.thumbnail;
        data["isArchive"] = this.isArchive;
        data["isPublic"] = this.isPublic;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdatePostCommand {
    id?: number;
    locales?: PostLocale[] | undefined;
    categoryId?: number;
    tags?: string | undefined;
    thumbnail?: string | undefined;
    isArchive?: boolean;
    isPublic?: boolean;
    description?: string | undefined;
}

export class CreatePostCommand implements ICreatePostCommand {
    description?: string | undefined;
    tags?: string | undefined;
    locales?: PostLocaleDto[] | undefined;

    constructor(data?: ICreatePostCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.tags = _data["tags"];
            if (Array.isArray(_data["locales"])) {
                this.locales = [] as any;
                for (let item of _data["locales"])
                    this.locales!.push(PostLocaleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePostCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePostCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["tags"] = this.tags;
        if (Array.isArray(this.locales)) {
            data["locales"] = [];
            for (let item of this.locales)
                data["locales"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreatePostCommand {
    description?: string | undefined;
    tags?: string | undefined;
    locales?: PostLocaleDto[] | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}